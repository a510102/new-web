{"version":3,"sources":["Nav.js","SearchBox.js","Mainpage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","onChangeCategory","onChangeCounty","className","type","value","onClick","map","category","i","key","SearchBox","setKeyword","handleSearchKeyWord","onSubmit","event","placeholder","onChange","e","target","Mainpage","news","item","newImage","backgroundImage","urlToImage","backgroundPosition","backgroundSize","height","width","title","style","author","publishedAt","content","href","url","App","useState","keyword","setNews","country","setCountry","useEffect","a","fetch","response","json","articles","FetchNews","Url","preventDefault","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1c36397.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Nav({ onChangeCategory, onChangeCounty }) {\n    const categorys = [\"business\", \"entertainment\", \"general\", \"health\", \"science\", \"sports\", \"technology\"];\n    return (\n        <nav className=\"nav-list\">\n            <h1 className=\"nav-title\">\n                My News\n            </h1>\n            <div className=\"nav-items\">\n                <div className=\"nav-item-county\">\n                    <h3 className=\"nav-item-title\">國家/ 類別:</h3>\n                    <input type=\"button\" value=\"Taiwan\" onClick={() => onChangeCounty('tw')} />\n                    <input type=\"button\" value=\"USA\" onClick={() => onChangeCounty('us')} />\n                </div>\n                <div className=\"nav-item-categary\">\n                    {\n                        categorys.map((category, i) => {\n                            return (\n                                <input\n                                    key={i}\n                                    type=\"button\"\n                                    value={category}\n                                    onClick={() => onChangeCategory(category)} />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react'\n\nfunction SearchBox({ setKeyword, handleSearchKeyWord }) {\n    return (\n        <form className=\"searchbox\" onSubmit={event => handleSearchKeyWord(event)}>\n            <input\n                type=\"text\"\n                placeholder=\"Type key word...\"\n                onChange={e => setKeyword(e.target.value)} />\n            <input\n                type=\"button\"\n                value=\"搜尋\"\n                onClick={handleSearchKeyWord} />\n        </form>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nfunction Mainpage({ news }) {\n    return (\n        <ul className=\"news-list\">\n            {\n                news.map((item, i) => {\n                    const newImage = {\n                        backgroundImage: `url(${item.urlToImage})`,\n                        backgroundPosition: 'center',\n                        backgroundSize: 'cover',\n                        height: '15rem',\n                        width: '15rem',\n                    }\n                    return (\n                        <li className=\"news-self\" key={i}>\n                            <h3 className=\"news-title\">{item.title}</h3>\n                            <div className=\"news-image\" style={newImage}>\n                            </div>\n                            <p>{item.author} - {item.publishedAt}</p>\n                            <p>{item.content}</p>\n                            <a href={item.url}>More...</a>\n                        </li>\n                    )\n                })\n            }\n        </ul >\n    )\n}\n\nexport default Mainpage","import React, { useState, useEffect } from 'react';\nimport Nav from './Nav';\nimport SearchBox from './SearchBox';\nimport Mainpage from './Mainpage';\nimport './style/style.css'\n\n\nfunction App() {\n  const [keyword, setKeyword] = useState('');\n  const [news, setNews] = useState([]);\n  const [country, setCountry] = useState('tw');\n  useEffect(() => {\n    const FetchNews = async () => {\n      const response = await fetch(`https://newsapi.org/v2/top-headlines?country=${country}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`);\n      const news = await response.json()\n      setNews(news.articles);\n    }\n    FetchNews();\n\n  }, [country])\n\n\n  const onChangeCounty = async (country) => {\n    setCountry(country);\n    const Url = `https://newsapi.org/v2/top-headlines?country=${country}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`\n    const response = await fetch(Url);\n    const news = await response.json()\n    setNews(news.articles);\n  }\n\n  const onChangeCategory = async (category) => {\n    const Url = `https://newsapi.org/v2/top-headlines?country=${country}&category=${category}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`\n    const response = await fetch(Url);\n    const news = await response.json();\n    setNews(news.articles);\n  }\n\n  const handleSearchKeyWord = async (event) => {\n    event.preventDefault();\n    const Url = `https://newsapi.org/v2/top-headlines?country=${country}&q=${keyword}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`;\n    console.log(Url)\n    const response = await fetch(Url);\n    const news = await response.json();\n    console.log(news)\n    setNews(news.articles);\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav onChangeCategory={onChangeCategory} onChangeCounty={onChangeCounty} />\n      <SearchBox setKeyword={setKeyword} handleSearchKeyWord={handleSearchKeyWord} />\n      <Mainpage news={news} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}