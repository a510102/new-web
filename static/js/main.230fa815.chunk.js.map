{"version":3,"sources":["components/Nav.js","components/SearchBox.js","components/Mainpage.js","components/Pages.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nav","onChangeCategory","onChangeCounty","country","categoryD","className","type","value","onClick","map","category","i","key","SearchBox","keyword","setKeyword","handleSearchKeyWord","onSubmit","event","id","onChange","e","target","required","htmlFor","Mainpage","news","isLoading","length","item","newImage","backgroundImage","urlToImage","backgroundPosition","backgroundSize","title","style","author","publishedAt","description","href","url","rel","Pages","pages","setPage","pageD","page","App","useState","setNews","setCountry","setIsLoading","setCategory","setPages","useEffect","FetchNews","conutryValue","categoryValue","keywordValue","a","Url","console","log","fetch","response","json","articles","countPages","data","num","newArray","push","countryValue","preventDefault","filterNews","slice","div","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.230fa815.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Nav({ onChangeCategory, onChangeCounty, country, categoryD }) {\n    const categorys = [\"business\", \"entertainment\", \"general\", \"health\", \"science\", \"sports\", \"technology\"];\n    return (\n        <nav className=\"nav-list\">\n            <h1 className=\"nav-title\">\n                My News\n            </h1>\n            <div className=\"nav-hamburger\">\n                <span className=\"bar\"></span>\n                <span className=\"bar\"></span>\n                <span className=\"bar\"></span>\n            </div>\n            <div className=\"nav-items\">\n                <div className=\"nav-item-county\">\n                    <h3 className=\"nav-item-title\">國家</h3>\n                    <div className=\"county-list\">\n                        <input\n                            type=\"button\"\n                            className={country === \"tw\" ? \"active\" : \"\"}\n                            value=\"Taiwan\"\n                            onClick={() => onChangeCounty('tw')} />\n                        <input\n                            type=\"button\"\n                            value=\"USA\"\n                            className={country === \"us\" ? \"active\" : \"\"}\n                            onClick={() => onChangeCounty('us')} />\n                    </div>\n\n                </div>\n                <div className=\"nav-item-category\">\n                    <h3 className=\"nav-item-title\">類別</h3>\n                    <div className=\"category-list\">\n                        {\n                            categorys.map((category, i) => {\n                                return (\n                                    <button\n                                        key={i}\n                                        className={categoryD === category ? 'active' : ''}\n                                        onClick={() =>\n                                            onChangeCategory(category)}\n                                    >{category}</button>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react'\n\nfunction SearchBox({ keyword, setKeyword, handleSearchKeyWord }) {\n    return (\n        <form\n            className=\"searchbox\"\n            onSubmit={event => handleSearchKeyWord(event)}>\n            <div className=\"searchbox-search\">\n                <input\n                    id=\"searchbox-input\"\n                    className=\"searchbox-input\"\n                    type=\"text\"\n                    value={keyword}\n                    onChange={e => setKeyword(e.target.value)} required />\n                <label\n                    htmlFor=\"searchbox-input\" className=\"searchbox-input-label\">\n                    <span className=\"searchbox-input-label-name\">關鍵字</span>\n                </label>\n            </div>\n            <input\n                className=\"searchbox-btn\"\n                type=\"button\"\n                value=\"搜尋\"\n                onClick={handleSearchKeyWord} />\n        </form>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nfunction Mainpage({ news, isLoading }) {\n    return (\n        <ul className=\"news-list\">\n            {!isLoading ?\n                news.length === 0 ?\n                    <div>\n                        <h3><i className=\"fas fa-exclamation-triangle fa-fw\"></i>....沒有符合的新聞,請重新搜尋 </h3>\n                    </div> :\n                    news.map((item, i) => {\n                        const newImage = {\n                            backgroundImage: `url(${item.urlToImage})`,\n                            backgroundPosition: 'center',\n                            backgroundSize: 'cover',\n                        }\n                        return (\n                            <li className=\"news-self\" key={i}>\n                                <h3 className=\"news-title\">    {item.title}</h3>\n                                <div className=\"news-image\" style={newImage}>\n                                </div>\n                                <p className=\"news-author\">{item.author}  {item.publishedAt}</p>\n                                <p className=\"news-content\">{item.description}</p>\n                                <a href={item.url}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\">More...</a>\n                            </li>\n                        )\n                    }) : (\n                    <div>\n                        <h3>Loading <i className=\"fas fa-spinner fa-fw fa-spin\"></i></h3>\n                    </div>)\n            }\n        </ul >\n    )\n}\n\nexport default Mainpage","import React from 'react'\n\nfunction Pages({ pages, setPage, pageD, isLoading }) {\n    return (\n        <ul className=\"pages\">\n            {!isLoading ?\n                pages.map((page, i) => {\n                    return (\n                        <li key={i}>\n                            <button\n                                className={pageD === page ? \"active\" : \"\"}\n                                onClick={() => setPage(page)}>{page}</button>\n                        </li>\n                    )\n                }) : \"\"\n            }\n        </ul>\n    )\n}\n\nexport default Pages;","import React, { useState, useEffect } from 'react';\nimport Nav from '../components/Nav';\nimport SearchBox from '../components/SearchBox';\nimport Mainpage from '../components/Mainpage';\nimport Pages from '../components/Pages'\nimport '../style/style.css'\n\n\nfunction App() {\n  const [keyword, setKeyword] = useState('');\n  const [news, setNews] = useState([]);\n  const [country, setCountry] = useState('tw');\n  const [isLoading, setIsLoading] = useState(false);\n  const [category, setCategory] = useState('');\n  const [pages, setPages] = useState([]);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    FetchNews(country);\n  }, [country]);\n\n  const FetchNews = async (conutryValue, categoryValue, keywordValue) => {\n    setIsLoading(true)\n    let Url = '';\n    if (!categoryValue) {\n      Url = `https://newsapi.org/v2/top-headlines?country=${conutryValue}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`;\n    } if (categoryValue) {\n      Url = `https://newsapi.org/v2/top-headlines?country=${country}&category=${categoryValue}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`;\n    } if (keywordValue) {\n      Url = `https://newsapi.org/v2/top-headlines?country=${country}&q=${keywordValue}&apiKey=9feb9ff5c6cf4b2d9597ba6479ce77b1`;\n    }\n    console.log(Url)\n    const response = await fetch(Url);\n    const news = await response.json();\n    setIsLoading(false);\n    console.log(news);\n    setNews(news.articles);\n    countPages(news.articles);\n  }\n\n  const countPages = (data) => {\n    let num = data.length / 4\n    const newArray = [];\n    for (let i = 1; i < num; i++) {\n      newArray.push(i)\n    }\n    setPages(newArray);\n  }\n\n  const onChangeCounty = async (countryValue) => {\n    if (country !== countryValue) {\n      setCountry(countryValue);\n      setCategory('');\n      FetchNews(countryValue);\n    }\n  }\n\n  const onChangeCategory = async (categoryValue) => {\n    if (category !== categoryValue) {\n      setCategory(categoryValue);\n      FetchNews(country, categoryValue)\n    }\n  }\n\n  const handleSearchKeyWord = async (event) => {\n    event.preventDefault();\n    FetchNews(country, keyword);\n    setKeyword('');\n  }\n\n  let filterNews = news.slice((page * 5 - 5), (page * 5 - 1));\n\n  return (\n    <div div className=\"App\" >\n      <Nav\n        categoryD={category}\n        onChangeCategory={onChangeCategory}\n        onChangeCounty={onChangeCounty}\n        country={country} />\n      <main className=\"main-news\">\n        <SearchBox\n          keyword={keyword}\n          setKeyword={setKeyword}\n          handleSearchKeyWord={handleSearchKeyWord} />\n        <Mainpage\n          news={filterNews}\n          isLoading={isLoading} />\n      </main>\n      <Pages\n        isLoading={isLoading}\n        pageD={page}\n        pages={pages}\n        setPage={setPage} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}